import{d as e,c as n,b as t,o as a}from"./vue.01a95355.js";const o={class:"markdown-body"},c=t(`<h2>Defining a component</h2><p>Define a class that inherits from <code class="">QuarkElement</code> and then use the <code class="">@customElement</code> decorator.</p><pre><code class="language-tsx"><span class="hljs-keyword">import</span> { QuarkElement, customElement } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;quarkc&quot;</span>

<span class="hljs-meta">@customElement</span>({ <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;quark-count&quot;</span> })
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Count</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">QuarkElement</span> </span>{<span class="hljs-comment">/***/</span>}
</code></pre><p>The <code class="">@customElement</code> decorator internally registers the custom element with the browser using <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define">customElements.define</a>.</p><h3>Quarkc components are essentially custom tags</h3><p>Components created with <code class="">@customElement</code> are equivalent to <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define">custom HTML elements</a>.</p><p>Therefore, you can use custom elements just like any built-in <code class="">HTML</code> element.</p><h3>Using Quarkc components</h3><p>Unlike components created with technical frameworks, you only need to import Quarkc components to use them.</p><pre><code class="language-js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#39;my-component&#39;</span>  <span class="hljs-comment">// \u2611\uFE0F</span>
<span class="hljs-comment">// import Count from &quot;my-component&quot;  \u274C</span>
<span class="hljs-comment">// import { Count } from &quot;my-component&quot; \u274C</span>

&lt;quark-count /&gt;  <span class="hljs-comment">// Usage</span>
</code></pre><p>Or create the element (component) using JS.</p><pre><code class="language-tsx"><span class="hljs-keyword">const</span> count = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#39;quark-count&#39;</span>)
</code></pre>`,12),l=[c],i={},d="",h=e({__name:"defining.en-US",setup(p,{expose:s}){return s({frontmatter:{},excerpt:void 0}),(r,m)=>(a(),n("div",o,l))}});export{h as default,d as excerpt,i as frontmatter};
